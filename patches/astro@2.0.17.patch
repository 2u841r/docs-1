diff --git a/dist/content/internal.js b/dist/content/internal.js
index 697a57cdce15610a422f9a42e861f2f4d7d99737..f449a727c0849b31d4a790ca276faf9d0005cf89 100644
--- a/dist/content/internal.js
+++ b/dist/content/internal.js
@@ -9,61 +9,65 @@ import {
   renderStyleElement,
   renderTemplate,
   renderUniqueStylesheet,
-  unescapeHTML
+  unescapeHTML,
 } from "../runtime/server/index.js";
-function createCollectionToGlobResultMap({
-  globResult,
-  contentDir
-}) {
+function createCollectionToGlobResultMap({ globResult, contentDir }) {
   const collectionToGlobResultMap = {};
   for (const key in globResult) {
-    const keyRelativeToContentDir = key.replace(new RegExp(`^${contentDir}`), "");
+    const keyRelativeToContentDir = key.replace(
+      new RegExp(`^${contentDir}`),
+      ""
+    );
     const segments = keyRelativeToContentDir.split("/");
-    if (segments.length <= 1)
-      continue;
+    if (segments.length <= 1) continue;
     const collection = segments[0];
     const entryId = segments.slice(1).join("/");
-    collectionToGlobResultMap[collection] ?? (collectionToGlobResultMap[collection] = {});
+    collectionToGlobResultMap[collection] ??
+      (collectionToGlobResultMap[collection] = {});
     collectionToGlobResultMap[collection][entryId] = globResult[key];
   }
   return collectionToGlobResultMap;
 }
+const cacheEntryByCollection = new Map();
 function createGetCollection({
   collectionToEntryMap,
-  collectionToRenderEntryMap
+  collectionToRenderEntryMap,
 }) {
   return async function getCollection(collection, filter) {
     const lazyImports = Object.values(collectionToEntryMap[collection] ?? {});
-    const entries = Promise.all(
-      lazyImports.map(async (lazyImport) => {
-        const entry = await lazyImport();
-        return {
-          id: entry.id,
-          slug: entry.slug,
-          body: entry.body,
-          collection: entry.collection,
-          data: entry.data,
-          async render() {
-            return render({
-              collection: entry.collection,
-              id: entry.id,
-              collectionToRenderEntryMap
-            });
-          }
-        };
-      })
-    );
+    let entries = [];
+    if (cacheEntryByCollection.has(collection)) {
+      entries = cacheEntryByCollection.get(collection);
+    } else {
+      entries = await Promise.all(
+        lazyImports.map(async (lazyImport) => {
+          const entry = await lazyImport();
+          return {
+            id: entry.id,
+            slug: entry.slug,
+            body: entry.body,
+            collection: entry.collection,
+            data: entry.data,
+            async render() {
+              return render({
+                collection: entry.collection,
+                id: entry.id,
+                collectionToRenderEntryMap,
+              });
+            },
+          };
+        })
+      );
+      cacheEntryByCollection.set(collection, entries);
+    }
     if (typeof filter === "function") {
-      return (await entries).filter(filter);
+      return entries.filter(filter);
     } else {
       return entries;
     }
   };
 }
-function createGetEntryBySlug({
-  getCollection,
-  collectionToRenderEntryMap
-}) {
+function createGetEntryBySlug({ getCollection, collectionToRenderEntryMap }) {
   return async function getEntryBySlug(collection, slug) {
     const entries = await getCollection(collection);
     let candidate = void 0;
@@ -87,55 +91,59 @@ function createGetEntryBySlug({
         return render({
           collection: entry.collection,
           id: entry.id,
-          collectionToRenderEntryMap
+          collectionToRenderEntryMap,
         });
-      }
+      },
     };
   };
 }
-async function render({
-  collection,
-  id,
-  collectionToRenderEntryMap
-}) {
+async function render({ collection, id, collectionToRenderEntryMap }) {
   var _a;
   const UnexpectedRenderError = new AstroError({
     ...AstroErrorData.UnknownContentCollectionError,
-    message: `Unexpected error while rendering ${String(collection)} \u2192 ${String(id)}.`
+    message: `Unexpected error while rendering ${String(
+      collection
+    )} \u2192 ${String(id)}.`,
   });
-  const lazyImport = (_a = collectionToRenderEntryMap[collection]) == null ? void 0 : _a[id];
-  if (typeof lazyImport !== "function")
-    throw UnexpectedRenderError;
+  const lazyImport =
+    (_a = collectionToRenderEntryMap[collection]) == null ? void 0 : _a[id];
+  if (typeof lazyImport !== "function") throw UnexpectedRenderError;
   const baseMod = await lazyImport();
   if (baseMod == null || typeof baseMod !== "object")
     throw UnexpectedRenderError;
   const { collectedStyles, collectedLinks, collectedScripts, getMod } = baseMod;
-  if (typeof getMod !== "function")
-    throw UnexpectedRenderError;
+  if (typeof getMod !== "function") throw UnexpectedRenderError;
   const mod = await getMod();
-  if (mod == null || typeof mod !== "object")
-    throw UnexpectedRenderError;
+  if (mod == null || typeof mod !== "object") throw UnexpectedRenderError;
   const Content = createComponent({
     factory(result, baseProps, slots) {
-      let styles = "", links = "", scripts = "";
+      let styles = "",
+        links = "",
+        scripts = "";
       if (Array.isArray(collectedStyles)) {
-        styles = collectedStyles.map((style) => renderStyleElement(style)).join("");
+        styles = collectedStyles
+          .map((style) => renderStyleElement(style))
+          .join("");
       }
       if (Array.isArray(collectedLinks)) {
-        links = collectedLinks.map((link) => {
-          return renderUniqueStylesheet(result, {
-            href: prependForwardSlash(link)
-          });
-        }).join("");
+        links = collectedLinks
+          .map((link) => {
+            return renderUniqueStylesheet(result, {
+              href: prependForwardSlash(link),
+            });
+          })
+          .join("");
       }
       if (Array.isArray(collectedScripts)) {
-        scripts = collectedScripts.map((script) => renderScriptElement(script)).join("");
+        scripts = collectedScripts
+          .map((script) => renderScriptElement(script))
+          .join("");
       }
       let props = baseProps;
       if (id.endsWith("mdx")) {
         props = {
           components: mod.components ?? {},
-          ...baseProps
+          ...baseProps,
         };
       }
       return createHeadAndContent(
@@ -149,16 +157,16 @@ async function render({
         )}`
       );
     },
-    propagation: "self"
+    propagation: "self",
   });
   return {
     Content,
     headings: mod.getHeadings(),
-    remarkPluginFrontmatter: mod.frontmatter
+    remarkPluginFrontmatter: mod.frontmatter,
   };
 }
 export {
   createCollectionToGlobResultMap,
   createGetCollection,
-  createGetEntryBySlug
+  createGetEntryBySlug,
 };